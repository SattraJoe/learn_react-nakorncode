/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as R6ListRouteImport } from './routes/6-list'
import { Route as R5ConditionalRouteImport } from './routes/5-conditional'
import { Route as R4ChildrenRouteImport } from './routes/4-children'
import { Route as R3PropsRouteImport } from './routes/3-props'
import { Route as R2ComponentsRouteImport } from './routes/2-components'
import { Route as R1JsxRouteImport } from './routes/1-jsx'
import { Route as IndexRouteImport } from './routes/index'

const R6ListRoute = R6ListRouteImport.update({
  id: '/6-list',
  path: '/6-list',
  getParentRoute: () => rootRouteImport,
} as any)
const R5ConditionalRoute = R5ConditionalRouteImport.update({
  id: '/5-conditional',
  path: '/5-conditional',
  getParentRoute: () => rootRouteImport,
} as any)
const R4ChildrenRoute = R4ChildrenRouteImport.update({
  id: '/4-children',
  path: '/4-children',
  getParentRoute: () => rootRouteImport,
} as any)
const R3PropsRoute = R3PropsRouteImport.update({
  id: '/3-props',
  path: '/3-props',
  getParentRoute: () => rootRouteImport,
} as any)
const R2ComponentsRoute = R2ComponentsRouteImport.update({
  id: '/2-components',
  path: '/2-components',
  getParentRoute: () => rootRouteImport,
} as any)
const R1JsxRoute = R1JsxRouteImport.update({
  id: '/1-jsx',
  path: '/1-jsx',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/1-jsx': typeof R1JsxRoute
  '/2-components': typeof R2ComponentsRoute
  '/3-props': typeof R3PropsRoute
  '/4-children': typeof R4ChildrenRoute
  '/5-conditional': typeof R5ConditionalRoute
  '/6-list': typeof R6ListRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/1-jsx': typeof R1JsxRoute
  '/2-components': typeof R2ComponentsRoute
  '/3-props': typeof R3PropsRoute
  '/4-children': typeof R4ChildrenRoute
  '/5-conditional': typeof R5ConditionalRoute
  '/6-list': typeof R6ListRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/1-jsx': typeof R1JsxRoute
  '/2-components': typeof R2ComponentsRoute
  '/3-props': typeof R3PropsRoute
  '/4-children': typeof R4ChildrenRoute
  '/5-conditional': typeof R5ConditionalRoute
  '/6-list': typeof R6ListRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/1-jsx'
    | '/2-components'
    | '/3-props'
    | '/4-children'
    | '/5-conditional'
    | '/6-list'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/1-jsx'
    | '/2-components'
    | '/3-props'
    | '/4-children'
    | '/5-conditional'
    | '/6-list'
  id:
    | '__root__'
    | '/'
    | '/1-jsx'
    | '/2-components'
    | '/3-props'
    | '/4-children'
    | '/5-conditional'
    | '/6-list'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R1JsxRoute: typeof R1JsxRoute
  R2ComponentsRoute: typeof R2ComponentsRoute
  R3PropsRoute: typeof R3PropsRoute
  R4ChildrenRoute: typeof R4ChildrenRoute
  R5ConditionalRoute: typeof R5ConditionalRoute
  R6ListRoute: typeof R6ListRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/6-list': {
      id: '/6-list'
      path: '/6-list'
      fullPath: '/6-list'
      preLoaderRoute: typeof R6ListRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/5-conditional': {
      id: '/5-conditional'
      path: '/5-conditional'
      fullPath: '/5-conditional'
      preLoaderRoute: typeof R5ConditionalRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/4-children': {
      id: '/4-children'
      path: '/4-children'
      fullPath: '/4-children'
      preLoaderRoute: typeof R4ChildrenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/3-props': {
      id: '/3-props'
      path: '/3-props'
      fullPath: '/3-props'
      preLoaderRoute: typeof R3PropsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/2-components': {
      id: '/2-components'
      path: '/2-components'
      fullPath: '/2-components'
      preLoaderRoute: typeof R2ComponentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/1-jsx': {
      id: '/1-jsx'
      path: '/1-jsx'
      fullPath: '/1-jsx'
      preLoaderRoute: typeof R1JsxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R1JsxRoute: R1JsxRoute,
  R2ComponentsRoute: R2ComponentsRoute,
  R3PropsRoute: R3PropsRoute,
  R4ChildrenRoute: R4ChildrenRoute,
  R5ConditionalRoute: R5ConditionalRoute,
  R6ListRoute: R6ListRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
